{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const path = require('path')\nconst fs = require('fs')\nconst fsp = fs.promises\n\nconst toc = require('markdown-toc')\nconst documentation = require('documentation')\n\n/**\n * Read the file contents of a Markdown file into a string\n *\n * @param {String} file - The fully qualified input file refer to `path.join` and `__dirname`\n * @return {Promise<string>}\n */\nconst readContents = async (file) => fsp.readFile(file, { encoding: 'utf8', flag: 'r' })\n\n/**\n * Write the given contents ( Markdown as a string ) to the given file.\n *\n * @param {String} file - The fully qualified output file refer to `path.join` and `__dirname`\n * @param {String} content - the content to write to the file.\n * @param {Object} [options={encoding:'utf-8'}] - optional options passed to `fs#writeFile`\n * @return {Promise<void>}\n * @example\n *\n */\nconst writeContents = async (file, content, options = { encoding: 'utf-8' }) => fsp.writeFile(file, content, options)\n\n/**\n * Insert JavaScript Documentation into these fences.\n *\n * @param {String} markdownContent - The WHOLE read me file, or file that has the TOC Fence in it.\n * @param {String[]} indexes - the fully qualified source files.\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to insert the `tutorial.md` file.\n *   <!--START_SECTION:jsdoc-->\n *   <!--END_SECTION:jsdoc-->\n */\nconst injectJsDoc = async (markdownContent, indexes) => {\n  const START_COMMENT_FENCE = '<!--START_SECTION:jsdoc-->'\n  const END_COMMENT_FENCE = '<!--END_SECTION:jsdoc-->'\n  const listRegExp = new RegExp(\n    `${START_COMMENT_FENCE}[\\\\s\\\\S]+${END_COMMENT_FENCE}`\n  )\n  const meta = await documentation.build(\n    indexes, // [path.join(__dirname, 'src', 'index.js')],\n    {}\n  )\n  let docs = await documentation.formats.md(meta, { markdownToc: false })\n  docs = docs.replace(/^(#.)/gm, '#$1')\n  return markdownContent.replace(listRegExp, START_COMMENT_FENCE + '\\n' + '## API\\n\\n' + docs + '\\n' + END_COMMENT_FENCE)\n}\n\n/**\n * Inject a file into the meta tag location.\n *\n * @param {String} markdownContent - The whole markdown content of a file, that has the TOC Fence in it.\n * @param {String} baseDir - The base directory for all the fenced files.\n * @param {Object} [options={log:false,baseDir: null}] - An option\n * @param {Boolean} [options.log=false] - Log flag\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to insert the `tutorial.md` file.\n *   <!--START_SECTION:tutorial.md-->\n *   <!--END_SECTION:tutorial.md-->\n */\nconst injectFileFencePosts = async (markdownContent, baseDir, options = { log: false }) => {\n  options.log = options.log || false\n  const logFileName = ({ log }) => function logFileName (fileName) {\n    if (log) console.log('File name = ', fileName)\n    return fileName\n  }\n  const START_LOAD_FILE_FENCE = (file = '(.*)') => `<!--START_SECTION:file:${file}-->`\n  const END_LOAD_FILE_FENCE = (file = '(.*)') => `<!--END_SECTION:file:${file}-->`\n  const loadFileRegExp = new RegExp(START_LOAD_FILE_FENCE(), 'g')\n  const fileFencePostsRegExp = (file) => {\n    return new RegExp(`${START_LOAD_FILE_FENCE(file)}[\\\\s\\\\S]+${END_LOAD_FILE_FENCE(file)}`)\n  }\n  const pathBuilder = (file) => path.join(baseDir, file)\n  // const readMeContent = await readContents( markdownContent )\n  // const files = [...readMeContent.matchAll( loadFileRegExp ) ].reduce( ( acc, [,file ] ) => { acc.push( file ); return acc }, [] ).map( logFileName(options) );\n  const files = [...markdownContent.matchAll(loadFileRegExp)]\n    .reduce((acc, [, file]) => {\n      acc.push(file)\n      return acc\n    }, [])\n    .map(logFileName(options))\n  const contentMap = await Promise.all(files.map(async (file) => {\n    const fileName = pathBuilder(file)\n    let content = ''\n    try {\n      content = await readContents(fileName)\n    } catch (e) {\n      if (e.message) {\n        console.error(e.message)\n      } else {\n        console.error(e)\n      }\n    }\n    return { file, content }\n  }))\n  const printContent = (content) => content !== '' ? `\\n${content}\\n` : '\\n'\n  return contentMap.reduce(\n    (acc, { file, content }) =>\n      acc.replace(\n        fileFencePostsRegExp(file),\n        START_LOAD_FILE_FENCE(file) +\n        printContent(content) +\n        END_LOAD_FILE_FENCE(file)\n      ),\n    markdownContent\n  )\n}\n\n/**\n * Inject a file into the code fence section location with optional language highlighting.\n *\n * @param {String} markdownContent - The whole markdown content of a file, that has the Code Fence in it.\n * @param {String} baseDir - The base directory for all the fenced files.\n * @param {Object} [options={log:false}] - An option\n * @param {Boolean} [options.log=false] - Log flag\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to insert the file with optional language:\n *   <!--START_CODE_FENCE_SECTION:javascript:file:example.js-->\n *   <!--END_CODE_FENCE_SECTION:javascript:file:example.js-->\n *\n *   Or without language:\n *   <!--START_CODE_FENCE_SECTION:file:example.txt-->\n *   <!--END_CODE_FENCE_SECTION:file:example.txt-->\n */\nconst injectCodeFencePosts = async (markdownContent, baseDir, options = { log: false }) => {\n  options.log = options.log || false\n\n  const logFileName = ({ log }) => function logFileName (fileName) {\n    if (log) console.log('File name = ', fileName)\n    return fileName\n  }\n\n  const START_CODE_FENCE_SECTION = (lang = '', file = '(.*)') => lang ? `<!--START_CODE_FENCE_SECTION:${lang}:file:${file}-->` : `<!--START_CODE_FENCE_SECTION:file:${file}-->`\n\n  const END_CODE_FENCE_SECTION = (lang = '', file = '(.*)') => lang ? `<!--END_CODE_FENCE_SECTION:${lang}:file:${file}-->` : `<!--END_CODE_FENCE_SECTION:file:${file}-->`\n\n  const loadFileRegExp = /<!--START_CODE_FENCE_SECTION:(?:([^:]+):)?file:([^>]+?)-->/g\n\n  const codeFencePostsRegExp = (lang, file) => {\n    const pattern = lang\n      ? `<!--START_CODE_FENCE_SECTION:${lang}:file:${file}-->[\\\\s\\\\S]+<!--END_CODE_FENCE_SECTION:${lang}:file:${file}-->`\n      : `<!--START_CODE_FENCE_SECTION:file:${file}-->[\\\\s\\\\S]+<!--END_CODE_FENCE_SECTION:file:${file}-->`\n    return new RegExp(pattern)\n  }\n\n  const pathBuilder = (file) => path.join(baseDir, file)\n\n  const files = [...markdownContent.matchAll(loadFileRegExp)]\n    .reduce((acc, [, lang, file]) => {\n      acc.push({ lang: lang || '', file })\n      return acc\n    }, [])\n    .map(logFileName(options))\n\n  const contentMap = await Promise.all(files.map(async ({ lang, file }) => {\n    const fileName = pathBuilder(file)\n    let content = ''\n    try {\n      content = await readContents(fileName)\n    } catch (e) {\n      if (e.message) {\n        console.error(e.message)\n      } else {\n        console.error(e)\n      }\n    }\n    return { lang, file, content }\n  }))\n\n  const printContent = ({ lang, content }) => content !== '' ? `\\n\\`\\`\\`${lang || ''}\\n${content}\\n\\`\\`\\`\\n` : '\\n'\n\n  return contentMap.reduce(\n    (acc, { lang, file, content }) =>\n      acc.replace(\n        codeFencePostsRegExp(lang, file),\n        START_CODE_FENCE_SECTION(lang, file) +\n        printContent({ lang, content }) +\n        END_CODE_FENCE_SECTION(lang, file)\n      ),\n    markdownContent\n  )\n}\n\n/**\n * Inject a Table of Contents\n *\n * @param {String} markdownContent - The whole markdown file, or file that has the TOC Fence in it.\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to locate the TOC.\n *   <!--START_SECTION:toc-->\n *   <!--END_SECTION:toc-->\n */\nconst injectToc = async (markdownContent) => {\n  const { content } = toc(markdownContent, {})\n  const START_COMMENT_FENCE = '<!--START_SECTION:toc-->'\n  const END_COMMENT_FENCE = '<!--END_SECTION:toc-->'\n  const listRegExp = new RegExp(\n    `${START_COMMENT_FENCE}[\\\\s\\\\S]+${END_COMMENT_FENCE}`\n  )\n  return markdownContent.replace(listRegExp, START_COMMENT_FENCE + '\\n\\n## Table of contents\\n' + content + '\\n\\n' + END_COMMENT_FENCE)\n}\n\nconst compose = (...fns) => args => fns.reduce((p, f) => p.then(f), Promise.resolve(args))\n\n/**\n * Generate a Markdown File, processing all the fences.\n *\n * @param {String} markdownFile - The file name of the base file with the fences in it.\n * @param {String} [newMarkdownFile] - The file name of the output file\n * @param {String} baseDir - The directory path that all inserted files can be found\n * @param {String[]} indexes - The JavaScript files to build the JS Doc from.\n * @param {Object} [options] - Options.\n * @return {Promise<void>}\n */\nconst generateMarkDownFile = async (markdownFile, newMarkdownFile, baseDir, indexes, options) => {\n  const closureInjectFileFencePosts = (baseDir, options) => async (markdownContent) => injectFileFencePosts(markdownContent, baseDir, options)\n  const closureInjectCodeFencePosts = (baseDir, options) => async (markdownContent) => injectCodeFencePosts(markdownContent, baseDir, options)\n  const closureInjectJsDoc = (indexes) => async (markdownContent) => injectJsDoc(markdownContent, indexes)\n  const closureWriteContents = (outFile) => async (markdownContent) => writeContents(outFile, markdownContent)\n  return await compose(\n    readContents,\n    closureInjectJsDoc(indexes),\n    closureInjectFileFencePosts(baseDir, options),\n    closureInjectCodeFencePosts(baseDir, options),\n    injectToc,\n    closureWriteContents(newMarkdownFile)\n  )(markdownFile)\n}\nmodule.exports = {\n  readContents,\n  writeContents,\n  injectJsDoc,\n  injectFileFencePosts,\n  injectCodeFencePosts,\n  injectToc,\n  generateMarkDownFile\n}\n"],"names":[],"mappings":"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"}