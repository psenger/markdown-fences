{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["const path = require('path')\nconst fs = require('fs')\nconst fsp = fs.promises\n\nconst toc = require('markdown-toc')\nconst documentation = require('documentation')\n\n/**\n * Read the file contents of a Markdown file into a string\n *\n * @param {String} file - The fully qualified input file refer to `path.join` and `__dirname`\n * @return {Promise<string>}\n */\nconst readContents = async (file) => fsp.readFile(file, { encoding: 'utf8', flag: 'r' });\n\n/**\n * Write the given contents ( Markdown as a string ) to the given file.\n *\n * @param {String} file - The fully qualified output file refer to `path.join` and `__dirname`\n * @param {String} content - the content to write to the file.\n * @param {Object} [options={encoding:'utf-8'}] - optional options passed to `fs#writeFile`\n * @return {Promise<void>}\n * @example\n *\n */\nconst writeContents = async (file, content, options = { encoding: 'utf-8' }) => fsp.writeFile(file, content, options);\n\n/**\n * Insert JavaScript Documentation into these fences.\n *\n * @param {String} markdownContent - The WHOLE read me file, or file that has the TOC Fence in it.\n * @param {String[]} indexes - the fully qualified source files.\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to insert the `tutorial.md` file.\n *   <!--START_SECTION:jsdoc-->\n *   <!--END_SECTION:jsdoc-->\n */\nconst injectJsDoc = async ( markdownContent, indexes ) => {\n  const START_COMMENT_FENCE = '<!--START_SECTION:jsdoc-->'\n  const END_COMMENT_FENCE = '<!--END_SECTION:jsdoc-->'\n  const listRegExp = new RegExp(\n    `${START_COMMENT_FENCE}[\\\\s\\\\S]+${END_COMMENT_FENCE}`\n  )\n  const meta = await documentation.build(\n    indexes, //[path.join(__dirname, 'src', 'index.js')],\n    {}\n  )\n  let docs = await documentation.formats.md(meta,{ markdownToc: false })\n  docs = docs.replace(/^(#.)/gm, '#$1')\n  return markdownContent.replace(listRegExp, START_COMMENT_FENCE + '\\n' + '## API\\n\\n' + docs + '\\n' + END_COMMENT_FENCE )\n}\n\n/**\n * Inject a file into the meta tag location.\n *\n * @param {String} markdownContent - The whole markdown content of a file, that has the TOC Fence in it.\n * @param {String} baseDir - The base directory for all the fenced files.\n * @param {Object} [options={log:false,baseDir: null}] - An option\n * @param {Boolean} [options.log=false] - Log flag\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to insert the `tutorial.md` file.\n *   <!--START_SECTION:tutorial.md-->\n *   <!--END_SECTION:tutorial.md-->\n */\nconst injectFileFencePosts = async ( markdownContent, baseDir, options = { log : false } ) => {\n  options.log = options.log || false;\n  const logFileName = ( {log} ) => function logFileName ( fileName ) {\n    if ( log ) console.log( 'File name = ', fileName )\n    return fileName\n  }\n  const START_LOAD_FILE_FENCE = (file = '(.*)') => `<!--START_SECTION:file:${file}-->`\n  const END_LOAD_FILE_FENCE = (file = '(.*)') => `<!--END_SECTION:file:${file}-->`\n  const loadFileRegExp = new RegExp(START_LOAD_FILE_FENCE(),'g')\n  const fileFencePostsRegExp = ( file ) => {\n    return new RegExp(`${ START_LOAD_FILE_FENCE( file ) }[\\\\s\\\\S]+${ END_LOAD_FILE_FENCE( file ) }`)\n  }\n  const pathBuilder = (file) => path.join( baseDir, file )\n  // const readMeContent = await readContents( markdownContent )\n  // const files = [...readMeContent.matchAll( loadFileRegExp ) ].reduce( ( acc, [,file ] ) => { acc.push( file ); return acc }, [] ).map( logFileName(options) );\n  const files = [...markdownContent.matchAll( loadFileRegExp ) ].reduce( ( acc, [,file ] ) => { acc.push( file ); return acc }, [] ).map( logFileName(options) );\n  const contentMap = await Promise.all( files.map( async ( file ) => {\n    const fileName = pathBuilder(file);\n    let content = '';\n    try {\n      content = await readContents(fileName);\n    } catch (e) {\n      if ( e.message ) {\n        console.error(e.message);\n      } else {\n        console.error(e);\n      }\n    }\n    return { file, content };\n  } ) )\n  const printContent = (content) => content !== '' ? `\\n${content}\\n` : '\\n'\n  return contentMap.reduce(\n    ( acc, { file, content } ) => acc.replace( fileFencePostsRegExp( file ), START_LOAD_FILE_FENCE(file) + printContent(content) + END_LOAD_FILE_FENCE(file) ),\n    markdownContent\n  );\n}\n\n/**\n * Inject a Table of Contents\n *\n * @param {String} markdownContent - The whole markdown file, or file that has the TOC Fence in it.\n * @return {Promise<String>} - The processed content.\n * @example\n * File must have these meta Tags to locate the TOC.\n *   <!--START_SECTION:toc-->\n *   <!--END_SECTION:toc-->\n */\nconst injectToc = async ( markdownContent ) => {\n  const { content } = toc( markdownContent, {} );\n  const START_COMMENT_FENCE = '<!--START_SECTION:toc-->'\n  const END_COMMENT_FENCE = '<!--END_SECTION:toc-->'\n  const listRegExp = new RegExp(\n    `${START_COMMENT_FENCE}[\\\\s\\\\S]+${END_COMMENT_FENCE}`\n  )\n  return markdownContent.replace(listRegExp, START_COMMENT_FENCE + '\\n\\n## Table of contents\\n' + content + '\\n\\n' + END_COMMENT_FENCE );\n}\n\nconst compose = (...fns) => args => fns.reduce((p, f) => p.then(f), Promise.resolve(args));\n\n/**\n * Generate a Markdown File, processing all the fences.\n *\n * @param {String} markdownFile - The file name of the base file with the fences in it.\n * @param {String} [newMarkdownFile] - The file name of the output file\n * @param {String} baseDir - The directory path that all inserted files can be found\n * @param {String[]} indexes - The JavaScript files to build the JS Doc from.\n * @param {Object} [options] - Options.\n * @return {Promise<void>}\n */\nconst generateMarkDownFile = async (markdownFile, newMarkdownFile, baseDir, indexes, options) => {\n  const closureInjectFileFencePosts = (baseDir, options) => async (markdownContent) => injectFileFencePosts(markdownContent, baseDir, options)\n  const closureInjectJsDoc = (indexes) => async (markdownContent) => injectJsDoc(markdownContent, indexes)\n  const closureWriteContents = (outFile) => async (markdownContent) => writeContents(outFile,markdownContent)\n  return await compose(\n    readContents,\n    closureInjectJsDoc(indexes),\n    closureInjectFileFencePosts(baseDir, options),\n    injectToc,\n    closureWriteContents(newMarkdownFile)\n  )(markdownFile)\n}\n\nmodule.exports = {\n  readContents,\n  writeContents,\n  injectJsDoc,\n  injectFileFencePosts,\n  injectToc,\n  generateMarkDownFile,\n}\n"],"names":[],"mappings":"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"}